#!/usr/local/skysql/perl/bin/perl
use English qw( -no_match_vars );
use strict;
use Class::Struct;
use warnings FATAL => 'all';
use Sys::Hostname;
use Gearman::XS qw(:constants);
use Gearman::XS::Client;
use JSON;

sub get_json_local_infos(){
  system("cat /proc/meminfo |  grep MemTotal | awk '{print \$2}'"); 
  my $ram =$? ;

   my $interface;
   my %IPs;
    foreach (qx{ (LC_ALL=C /sbin/ifconfig -a 2>&1) }) {
        $interface = $1 if /^(\S+?):?\s/;
        next unless defined $interface;
        $IPs{$interface}->{STATE} = uc($1) if /\b(up|down)\b/i;
        $IPs{$interface}->{STATE} =defined( $IPs{$interface}->{STATE}) ?  $IPs{$interface}->{STATE} : "na";
        $IPs{$interface}->{IP}    = $1     if /inet\D+(\d+\.\d+\.\d+\.\d+)/i; 
        $IPs{$interface}->{IP} =defined( $IPs{$interface}->{IP}) ?  $IPs{$interface}->{IP} : "na";
    }
  my $json       = new JSON ;
  my $json_interfaces = $json->allow_nonref->utf8->encode(\%IPs);
  return $json_interfaces;
 }



if (scalar(@ARGV) < 2) {
	print ""
	. "Cloud manager Ver 1.0\n" 
	. "This software comes with ABSOLUTELY NO WARRANTY\n"
	. "This is free software under GPLv2, trademark to SkySQL AB \n\n"
	. "Usage: $0 [instances|services] <action> <filter> <type>\n\n"
        . " Service action:\n"
        . "       \t[install|remove|sync|start|stop|restart|update]\n"
        . "       \t[switch|rolling_restart|join]\n"
        . "       \t[bootstrap_binaries|bootstrap_config|bootstrap_ncc]\n"
        . "       \t[bench_dbt2|bench_dbt3|bench_sysbench]\n"
	. " Filter: \n"
        . "       \t[all|service name |host name|local] default local    \n"
	. " Type: \n"
        . "       \t[all|db|nosql|bench|proxy|lb] default all     \n\n\n"
	. " Instance action:\n"
        . "       \t[status|launch|stop|start|terminate]\n"
        . " Filter:\n"
        . "       \t[all|cloud name]\n"
        . " Type: \n"
        . "       \t[all|ec2|vcloud|openstack] default all     \n\n\n";
	


        exit(1);
}

my $level =shift;

my $action =shift;
my $group=shift; 
my $type=shift;
if ( ! defined $type ) {$type='all';}
if ( ! defined $group ) {$group='all';}
if ( ! defined $level ) {$level='service';}

use Data::Dumper;
$Data::Dumper::Terse     = 1;       # don't output names where feasible
$Data::Dumper::Quotekeys = 0;
$Data::Dumper::Indent    = 1;       # mild pretty print
$Data::Dumper::Pair      = ":";
$Data::Dumper::Indent    = 1;
$Data::Dumper::Useqq     = 0; 

my $command='{"level":"'. $level .'","command":{"action":"'.$action.'","group":"'.$group.'","type":"'.$type.'"}, "host":{"interfaces":['. get_json_local_infos .'] }}';
my $json      = new JSON;
my $command_text =
          $json->allow_nonref->utf8->relaxed->escape_slash->loose->allow_singlequote->allow_barekey->decode($command);
    
 

print ">>>>>>>>>>>>>>>\n";
print  STDERR Dumper($command_text);
print "<<<<<<<<<<<<<<<\n";

sub format_grid_from_result($) {
  my $status =shift;  
  my @statusgrid=[];   
  my $host_info;

   
    foreach my $service (  @{ $status->{"services"}} )  {
     
    
       foreach my $host (keys $service) {
       print STDERR  $host;
    
       my $host_info = $service->{$host};
        print STDERR  $host_info->{"mode"};
       my $action_add  = 
       {
        name       => $host,
        mode       => $host_info->{"mode"},
        ip         => $host_info->{"ip"}, 
        status    => $host_info->{"status"},
        state     => $host_info->{"state"},
        time  => $host_info->{"time"}
       
       };
    push(@statusgrid , $action_add);   

    }
  }
    
  return @statusgrid;
    
    
}

sub gearman_client() {
  my $client = Gearman::XS::Client->new();
  $client->add_servers("localhost");
 
  (my $ret, my $result) = $client->do('cluster_cmd', $command);
    
    my $json      = new JSON;
    my @json_text =
          $json->utf8->relaxed->allow_singlequote->allow_barekey->decode($result);
 my $test =
          $json->utf8->relaxed->allow_singlequote->allow_barekey->decode($result);
      
 format_grid_from_result($test);
     print  STDERR Dumper(@json_text);
    
    
}

gearman_client();



