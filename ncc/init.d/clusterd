#!/bin/sh

# chkconfig: 2345 95 20
# description: ScrambleDB is database virtualisation architeture
# Startup script for ScrambleDB server and library
# Copyright (C) 2012 Stephane Varoqui @SkySQL AB 
# All rights reserved.
# processname: scrambledbd
#
# Use and distribution licensed under the LGPL license.  See
# the COPYING file in this directory for full text.

SKYDATADIR="/var/lib/skysql"
SKYBASEDIR="/usr/local/skysql" 
export SKYBASEDIR=$SKYBASEDIR
export SKYDATADIR=$SKYDATADIR
export SKYUSER=skysql
export SKYGROUP=skysql
export PATH=$PATH:$SKYBASEDIR/sandbox/bin/:$SKYBASEDIR/gearmand/bin/:$SKYBASEDIR/gearmand/sbin/:$SKYBASEDIR/mariadb-client/bin/:$SKYBASEDIR/java/Contents/Home/bin
export PERL5LIB=$SKYBASEDIR/sandbox/lib/site_perl/5.16.0:$SKYBASEDIR/perl/lib/site_perl/5.16.0/darwin-2level:$SKYBASEDIR/ncc/lib
export SANDBOX_AS_ROOT=1
export PYTHONUSERBASE=$SKYBASEDIR/MySQL-python
export PYTHONPATH=$SKYBASEDIR/MySQL-python/lib64/python2.6
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SKYBASEDIR/mysql-client/lib/:$SKYBASEDIR/boost/lib/:/usr/local/skysql/java/Contents/Home/lib

cd $SKYBASEDIR/ncc

groupadd -f $SKYGROUP 
useradd  -g  $SKYGROUP $SKYUSER &> /dev/null

chown -R $SKYUSER:$SKYGROUP $SKYDATADIR

if [ ! -d $SKYDATADIR ];
then
   mkdir $SKYDATADIR  
fi
if [ ! -d $SKYDATADIR/log ];
then
   mkdir $SKYDATADIR/log  
fi
if [ ! -d $SKYDATADIR/tmp ];
then
   mkdir $SKYDATADIR/tmp  
fi
if [ ! -d $SKYDATADIR/sandboxes ];
then
  mkdir $SKYDATADIR/sandboxes  
fi
if [ ! -d $SKYDATADIR/sandboxes ];
then
  mkdir $SKYDATADIR/sandboxes  
fi
if [ ! -d $SKYDATADIR/backup ];
then
  mkdir $SKYDATADIR/backup  
fi
if [ ! -d $SKYDATADIR/.ssh ];
then
  mkdir $SKYDATADIR/.ssh  
fi

echo 0 > /proc/sys/net/ipv4/tcp_tw_recycle
echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
echo 4096 > /proc/sys/net/core/somaxconn
echo 4096 > /proc/sys/net/ipv4/tcp_max_syn_backlog
echo 1 > /proc/sys/net/ipv4/tcp_no_metrics_save
echo 1 > /proc/sys/net/ipv4/ip_nonlocal_bind
echo 0 > /proc/sys/net/ipv4/conf/eth0/arp_ignore
echo 0 > /proc/sys/net/ipv4/conf/eth0/arp_announce 
echo 2 > /proc/sys/net/ipv4/conf/lo/rp_filter 
echo 2 > /proc/sys/net/ipv4/conf/eth1/rp_filter 
echo 0 > /proc/sys/net/ipv4/conf/lo/arp_ignore
echo 0 > /proc/sys/net/ipv4/conf/lo/arp_announce 
echo 1 > /proc/sys/net/ipv4/ip_forward


GEARMAND=$SKYBASEDIR/gearmand/sbin/gearmand
PIDFILE=$SKYDATADIR/tmp/gearmand.pid
LOG=$SKYDATADIR/log
WORKER=$SKYBASEDIR/ncc/bin/worker_node_cmd.pl 
WORKERCLUSTER=$SKYBASEDIR/ncc/bin/worker_cluster_cmd.pl 
WORKERCONFIG=$SKYBASEDIR/ncc/bin/worker_write_config.pl
WORKERHEARBEAT=$SKYBASEDIR/ncc/bin/worker_heartbeat.pl
WORKERDOCTOR=$SKYBASEDIR/ncc/bin/worker_cluster_doctor.pl
WORKERCLOUDDOCTOR=$SKYBASEDIR/ncc/bin/worker_cloud_doctor.pl
WEB=$SKYBASEDIR/ncc/web/bin/app.pl 



WORKERCLOUD=$SKYBASEDIR/ncc/bin/worker_cloud_cmd.py

PRIVATE=$2;

start()
{
 if [ "$PRIVATE" != "tunnel" ];
 then   
  $GEARMAND -P $PIDFILE  -d --log-file=$SKYDATADIR/log/gearmand.log 
  nohup $SKYBASEDIR/perl/bin/perl $WORKER  < /dev/null > $LOG/worker_node.log 2>&1 & 
  procid=$!
  echo $procid >> $SKYDATADIR/tmp/wrk$procid.pid
  nohup $SKYBASEDIR/perl/bin/perl $WORKERCLUSTER < /dev/null > $LOG/worker_cluster.log 2>&1 & 
  procid=$!
  echo $procid >> $SKYDATADIR/tmp/wrk$procid.pid
  nohup $SKYBASEDIR/perl/bin/perl $WORKERCLUSTER < /dev/null >> $LOG/worker_cluster.log 2>&1 & 
  procid=$!
  echo $procid >> $SKYDATADIR/tmp/wrk$procid.pid
  nohup $SKYBASEDIR/perl/bin/perl $WORKERCONFIG < /dev/null > $LOG/worker_config.log 2>&1 & 
  procid=$!
  echo $procid >> $SKYDATADIR/tmp/wrk$procid.pid  
  nohup $SKYBASEDIR/perl/bin/perl $WORKERHEARBEAT < /dev/null > $LOG/worker_hearbeat.log 2>&1 & 
  procid=$!
  echo $procid >> $SKYDATADIR/tmp/wrk$procid.pid  
  nohup $SKYBASEDIR/perl/bin/perl $WEB < /dev/null > $LOG/webgui.log 2>&1 & 
  procid=$!
  echo $procid >> $SKYDATADIR/tmp/wrk$procid.pid    
  nohup $SKYBASEDIR/perl/bin/perl $WORKERDOCTOR < /dev/null > $LOG/worker_doctor.log 2>&1 & 
  procid=$!
  echo $procid >> $SKYDATADIR/tmp/wrk$procid.pid 
  $SKYBASEDIR/ncc/bin/clmgr instances world
    
 else
  nohup $SKYBASEDIR/perl/bin/perl $WORKERCLOUDDOCTOR < /dev/null > $LOG/worker_cloud_doctor.log 2>&1 & 
  procid=$!
  echo $procid >> $SKYDATADIR/tmp/wrk$procid.pid   
  nohup python $WORKERCLOUD < /dev/null > $LOG/worker_cloud.log 2>&1 & 
  procid=$!
  echo $procid >> $SKYDATADIR/tmp/wrk$procid.pid 
 fi

}

stop()
{
  kill `cat $PIDFILE`
  killall gearmand   
  rm -f $PIDFILE
  _dfiles="$SKYDATADIR/tmp/wrk*.pid"
 
for f in $_dfiles
do
  echo "killing `cat $f`"
  kill `cat $f`  
  rm -f $f
done  

}
 
case "$1" in

  start)
    start
  ;;

  stop)
    stop
  ;;

  restart)
    stop
    start
  ;;

  *)
    echo "Usage: $0 {start|stop|restart} $1 {local|tunnel} "
  ;;

esac

