#!/usr/local/skysql/perl/bin/perl
use strict;
use Class::Struct;
use warnings FATAL => 'all';
use Sys::Hostname;
use Gearman::XS qw(:constants);
use Gearman::XS::Client;
use JSON;



if (scalar(@ARGV) < 2) {
	print ""
	. "Cloud manager Ver 1.0\n" 
	. "This software comes with ABSOLUTELY NO WARRANTY\n"
	. "This is free software under GPLv2, trademark to SkySQL AB \n\n"
	. "Usage: $0 [instances|services] <action> <filter> <type>\n\n"
        . " Service action:\n"
        . "       \t[install|remove|sync|start|stop|restart|update]\n"
        . "       \t[switch|rolling_restart|join]\n"
        . "       \t[bootstrap_binaries|bootstrap_config|bootstrap_ncc]\n"
        . "       \t[bench_dbt2|bench_dbt3|bench_sysbench]\n"
	. " Filter: \n"
        . "       \t[all|service name |host name|local] default local    \n"
	. " Type: \n"
        . "       \t[all|db|nosql|bench|proxy|lb] default all     \n\n\n"
	. " Instance action:\n"
        . "       \t[status|launch|stop|start|terminate]\n"
        . " Filter:\n"
        . "       \t[all|cloud name]\n"
        . " Type: \n"
        . "       \t[all|ec2|vcloud|openstack] default all     \n\n\n";
	


        exit(1);
}

my $level =shift;

my $action =shift;
my $group=shift; 
my $type=shift;
if ( ! defined $type ) {$type='all';}
if ( ! defined $group ) {$group='all';}
if ( ! defined $level ) {$level='service';}

my $command='{"level":"'. $level .'","command":{"action":"'.$action.'","group":"'.$group.'","type":"'.$type.'"}}';

print "$command\n";


sub gearman_client() {
  my $client = Gearman::XS::Client->new();
  $client->add_servers("localhost");
 
  (my $ret, my $result) = $client->do('cluster_cmd', $command);
    
my $json      = new JSON;
my @json_text =
      $json->utf8->relaxed->allow_singlequote->allow_barekey->decode($result);
use Data::Dumper;
$Data::Dumper::Terse     = 1;       # don't output names where feasible
    $Data::Dumper::Quotekeys = 0;
    $Data::Dumper::Indent    = 1;       # mild pretty print
    $Data::Dumper::Pair      = ":";
    $Data::Dumper::Indent    = 1;
    $Data::Dumper::Useqq     = 0; 
 print  STDERR Dumper(@json_text);
 #print STDOUT $result;
    
}


gearman_client();



